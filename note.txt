javascript lanjutan

/cara untuk membuat object pada javascript
//1. object literal
//problem: tidak efektif untuk objeck yang banyak
// let mahasiswa = {
//     nama: "azizan nur rohman", //properti isinya nilai
//     energi: 10,
//     makan: function(porsi){ //method isinya function
//         this.energi = this.energi + porsi;
//         console.log(`halo ${this.nama}, selamat makan`);
//     } 
// }

// let mahasiswa2 = {
//     nama: "azizan nur rohman", //properti isinya nilai
//     energi: 10,
//     makan: function(porsi){ //method isinya function
//         this.energi = this.energi + porsi;
//         console.log(`halo ${this.nama}, selamat makan`);
//     } 
// }
//kekurangannya kalau nambah mahasiswa kita harus menggunakan nama variabel yang berbeda ex. let mahasiswa1, mahasiswa2 dan seterusnya

//======================================================

// 2. Function Declaration
// keuntunggannya tidak perlu membuat duplikat dari objeknya, kita cuman tinggal buat templatenya(function) lalu pangil di instansiasinya saja
// ex template function
// function Mahasiswa(nama, energi){
//     let mahasiswa = {}; //objeck kosong
//     mahasiswa.nama = nama;
//     mahasiswa.energi = energi;
//     mahasiswa.makan = function(porsi){
//         this.energi += porsi
//         console.log(`halo ${this.nama}, selamat makan`);
//     }
//     mahasiswa.main = function(jam){
//         this.energi -= jam
//         console.log(`halo ${this.nama}, energi kamu berkurang karena main`)
//     }
//     return mahasiswa;
// }
// ex end template function

//ex instansiasi
// let azizan = Mahasiswa('azizan', 10);
// let azhar  = Mahasiswa('azhar', 20);
//ex end instansiasi

//======================================================
//3. Constructro function
// keyword 'new' 
//sama dengan function declaration cuman bedanya, di constructor function tidak ada returnya, cuman ada new sebagai returnya

// ex template function
function Mahasiswa(nama, energi){
	this.nama = nama;
	this.energi = energi;
	this.makan = function(porsi){
		this.energi += porsi
		console.log(`halo ${this.nama}, selamat makan dari custructor function`);
	}
	this.main = function(jam){
		this.energi -= jam
		console.log(`halo ${this.nama}, energi kamu berkurang karena main dari custructor function`)
	}            
}
// ex end template function

//ex instansiasi
let azizan = new Mahasiswa('azizan', 10);
let azhar  = new Mahasiswa('azhar', 20);
//ex end instansiasi

//=========================================================
4. Object.create
//object.crate
        const methodeMahasiswa={
            makan: function(porsi){
                this.energi += porsi;
                console.log(`halo ${this.nama}, selamat makan`);
            }
        }
        function Mahasiswa(nama, energi){
            let mahasiswa = Object.create(methodeMahasiswa); //object create ini menggunakan semua properti dari methodeMahasiswa, sehingga tidak perlu di daftarkan satu-satu di function mahasiwa
            mahasiswa.nama = nama;
            mahasiswa.energi = energi; 
            
            // mahasiswa.makan = methodeMahasiswa.makan(2) //dengan adanya object.create menjadikan ini tidak perlu lagi, karena sudah di inisiasi dan propertinya sudah dibawa didalam object.create(methodMahasiswa);
            return mahasiswa;       
        }
        var aziz = Mahasiswa('azizan', 50);
//========================================================

prototype
        //sebuah pewarisan dari sebuah function
        //dan ini sudah ada didefault sistem javascript nya, dan berjalan dibalik layar
        //contohya adalah seperti ini

        // function Mahasiswa(nama, energi){
        //     this.nama = nama;
        //     this.energi = energi;
        // }
        
        // // untuk mengambil semua isi pewarisan dari function mahasiswa dengan properti nama, energi maka dibuatlah prototype nya

        // Mahasiswa.prototype.makan = function(porsi){
        //     this.energi += porsi;
        //     return this.energi;
        // }

        // Mahasiswa.prototype.main = function(jam){
        //     this.energi -= jam;
        //     return this.energi;
        // }

        // let azizan = new Mahasiswa('azizan', 10);
	// azizan.makan(2);
	// azizan.main(1);

        //prototype ini sama dengan class yang ada di php bertipe oop, kita bisa menggunakan class agar lebih simpel untuk dibaca
        //padahal dibalik layar yang berjalan adalah prototype nya
        //baiklah ini adalah cara pemakaian class

        class Mahasiswa{
            constructor(nama, energi){
                this.nama = nama;
                this.energi = energi;
            }

            makan(porsi){
                this.energi += porsi;
                return `Halo ${this.nama}, selamat makan`;
            }

            main(jam){
                this.energi -= porsi;
                return `Halo ${this.nama}, kamu lagi main kan?`;
            }
        }

        let azhar = new Mahasiswa('azhar', '80');

===============================================================================================================

<script>
        //ini default closuse
        // function init(){
        //     var nama = "azizan"; //local variabel (ini berada di parent function yang bisa dipanggil didalam scope lexical atau scope function ini sendiri)
        //     function tampilNama(){ //inner function (closuer*)
        //         console.log(nama);//akses ke parent variable
        //     }
        //     tampilNama();
        // }
        // init();

        //return closuer
        // function init(){
        //     function tampilNama(nama){
        //         console.log(nama);
        //     }
        //     return tampilNama;
        // }
        // var panggilNama = init();
        // panggilNama('azkia zeline');

        //penggunakan function anonymouse closer dalam function factiories
        // function init(){
        //     return function(nama){
        //         console.log(nama);
        //     }             
        // }
        // var panggilNama = init();
        // panggilNama('azhar azizan');

        //penggunakan private method

        //console.dir(panggilNama);   //melihat factiories function
        //kenapa menggunakan closuer
        //1. untuk membuat function factories
        //2. untuk membuat private method

        //sejatinya kita tidak perlu menampung function dalam variabel seperti
        // var panggilNama = init();
        //kemudian di panggil seperti ini
        // panggilNama('azhar azizan'); 
        //cukup kita gunakan bungkus dalam imidietly enable function
        //contoh
        
        //1
        // let namaku = (function init(){
        //     return function(nama){
        //         console.log(nama);
        //     }             
        // })();
        // namaku('ini azizan');

        //2.
        // var salam = (function(){
        //     return function(nama){
        //         console.log(`halo ${nama}, selamat pagi`);
        //     }
        // })();
        // salam('azizan');

        //3. function dengan private method
        var data = (function(){
            let counter = 0;
            return function(){
                return ++counter; 
            }                       
        })();
        counter = 10; //variable ini tidak akan menganggu lainnnya
        console.log(data());               
        console.log(data());               
        console.log(data());  
        //return 11, 12, 13 krn tergnggu vae lainnya 
    </script>   
    
    =======================================================================
    
    //function arrow 
	// var tampilNama = (nama) => { return `halo ${nama} ini adalah function arrow` ; }
	// console.log(tampilNama('azizan'));

	//arrow function
	let tampilNama = ['azizan', 'azhar', 'zeline'];
	let jumlahNama = tampilNama.map(nama => ({nama: nama, jmlHuruf: nama.length}));
	console.table(jumlahNama);
	
======================================

//destruction js
//object mahasiswa
        const mhs = {
            nama: 'Azizan Nur Rohman',
            umur: '32',
            nilai:{
                uts: 80,
                uas: 85,
                tugas: 90
            }
        }

        function cetakMahasiswa({nama, umur, nilai: {uts, uas, tugas}}){
            return `Halo Nama Saya Adalah ${nama}, dan umur saya adalah ${umur}, 
                    untuk tugas saya nilainya adalah ${uts}`;
        }

        console.log(cetakMahasiswa(mhs));
    
    
